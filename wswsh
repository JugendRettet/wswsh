#!/usr/bin/mksh
# 2013 - wswsh - Ypnose <linuxien[AT]legtux[DOT]org
# wswsh

# This project is under BSD (3-Clause) License
# See LICENSE for license details.
# Copyright (c) 2013, Ypnose
# All rights reserved.

#set -x
RAC="$1"

function usage {
	print "usage: wswsh [website_root]"
}

function parse_config {
	if [[ -r ${RAC}/wswsh.conf ]]; then
		. "${RAC}/wswsh.conf"
	else
		print -u2 "Missing configs"
		exit 1
	fi
}

function verify_dirs {
	if [[ -n $SRC && -d ${RAC}/${SRC} ]]; then
		print "Using custom sources from $SRC"
		WSRC="../${SRC}"
	elif [[ -z $SRC && -d ${RAC}/src ]]; then
		print "Using sources from default directory src"
	else
		print -u2 "src doesn't exist"
		exit 1
	fi

	if [[ -n $DEST ]]; then
		if [[ -d ${RAC}/${DEST} ]]; then
			print "Using custom directory $DEST"
		else
			print "Creating directory $DEST"
			mkdir "$DEST"
		fi
	else
		print "Using default directory dest"
		[[ ! -d ${RAC}/dest ]] && mkdir "${RAC}/dest"
	fi
}

function get_structure {
	# Add a fuckin' message?
	verify_dirs
	if [[ -n $(find "${RAC}/${SRC:-src}" -type d -print) ]]; then
		# The following line works with GNU find:
		# find "${RAC}/${SRC:-src}" -type d -printf "${DEST}/%P\0" | xargs -0 mkdir -p
		# I finally decided to write lines "compatible" with {Mir,Open}BSD. Here we go:
		cd "${RAC}/${DEST:-dest}"
		( cd "${WSRC:-../src}"; find . -type d -print0 ) | xargs -0 mkdir -p
		cd ..
	else
		print "No folders found. Nothing to create"
	fi
}

# Rework this dark crap!!
#function ignore_f {
	#if [[ -n $IGNORE ]]; then
		#for i in $IGNORE; do
			#ARGS+="! -name ${i} "
		#done
	#fi
	#print "$ARGS"
#}

function page_int {
	if [[ -n $INTERP && ! -x ${RAC}/interp/${INTERP} ]]; then
		print -u2 "No intrepreter found"
		exit 1
	fi
	# More to come perhaps, with some others interpreters
	case $INTERP in
		smu) print "Converting from markdown using smu"; CINTERP="./interp/smu";;
	esac
}

function parse_css_f {
	if [[ -n $CSSF && -r ${RAC}/${SRC:-src}/${CSSF} ]]; then
		CSSV=1
		print "Using custom CSS style"
		cp "${RAC}/${SRC:-src}/${CSSF}" "${RAC}/${DEST:-dest}/${CSSF}"
	fi
}

# Generate the page
function gen_page_skel {
	parse_css_f
	page_int
	PAGES="$(find "${RAC}/${SRC:-src}" -type f -iname "*.${EXT:-txt}")"
	print "Generating pages..."
	cd "$RAC"
	for f in $(find "${SRC:-src}" -type f -iname "*.${EXT:-txt}"); do
		FILENOSRC="${f#*/}"
		FILENOEXT="${FILENOSRC%%.*}"
		FILEXPORT="${DEST:-dest}/${FILENOEXT}.html"
		# We got the title from <h1>
		ATIT="$(awk '/<h1>/{gsub(/\t/,"");gsub(/[</]|h1>/,"");gsub(/>|</,"");print " | "$0;exit}' $f)"
		page_head > "$FILEXPORT"
		"${CINTERP:-cat}" $f >> "$FILEXPORT"
		page_foot >> "$FILEXPORT"
		RET=$?
		if (( RET != 0 )); then
			print -u2 "Generating $f failed"
			exit 1
		fi
	done

	# RSS / Atom
	if [[ -n $FEED && $FEED = @([Yy]es|YES) ]]; then
		# XML date, emulates $(date --rfc-3339=seconds) from GNU date
		RDAT=$(LC_ALL=C date "+%Y-%m-%dT%H:%M:%SZ")
		RSSF="${DEST:-dest}/${RSSDIR}atom.xml"
		gen_site_xml > "$RSSF"
		for z in $(find "${SRC:-src}/blog/" -mindepth 2 -type f -iname "*.${EXT:-txt}"); do # Modify location!
			# Don't need to enable a specific hour, let's assume I wrote the pages at midnight.
			RDADAT="$(awk '/<!--/{gsub(/\t/,"");gsub(/<!-- | -->/,"");print $0"T00:00:00Z";exit}' $z)"
			RSSDES="$(awk '/<!-- DESC: /{gsub(/\t/,"");gsub(/<!-- DESC: | -->/,"");print $0;exit}' $z)"
			RSSTIT="$(awk '/<h1>/{gsub(/\t/,"");gsub(/[</]|h1>/,"");gsub(/>|</,"");print $0;exit}' $z)"
			RSSTNOSRC="${z#*/}"
			RSSTNOEXT="${RSSTNOSRC%%.*}"
			xml_content >> "$RSSF"
		done
		print '</feed>' >> "$RSSF"
	fi

	# We copy existing *.html files from src to dest
	for x in $(find "${SRC:-src}" -type f -iname "*.html"); do
		if [[ -r ${DEST:-dest}/${x#*/} ]]; then
			print "${DEST:-dest}/${x#*/} already exists"
			continue
		fi
		cp $x "${DEST:-dest}/${x#*/}"
	done

	# The code is easy to understand, right?
	if [[ -n $FIL ]]; then
		for y in $FIL; do
			if [[ ! -r ${SRC:-src}/${y} ]]; then
				print "$y is missing"
				continue
			fi
			cp "${SRC:-src}/${y}" "${DEST:-dest}/${y}"
		done
	fi
	cd ..
	TOT=$(find "${RAC}/${DEST:-dest}" -type f | wc -l)
	print "Generated $TOT files."
}

# Page content
function page_head {
	print '<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="author" content="John Foo" />'
	(( CSSV == 1 )) && print "	<link rel=\"stylesheet\" type=\"text/css\" href=\"/${CSSF}\" />"
	[[ -n $WTIT ]] && print "	<title>${WTIT}${ATIT}</title>"
	print '</head>
<body>
	<header></header>
	<nav>
		<ul>
			<li>TITLE1</li>
			<li>TITLE2</li>
			<li>TITLE3</li>
		</ul>
	</nav>'
}

function page_foot {
	print '	<footer></footer>
	<!-- Generated by wswsh - '"$(LC_ALL=C date)"' -->
</body>
</html>'
}

function gen_site_xml {
	print '<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>'"${WTIT}"'</title>
	<link href="http://'${WURL}'/"/>
	<link type="application/atom+xml" rel="self" href="http://'${WURL}'/'${RSSDIR}'atom.xml"/>
	<updated>'"${RDAT}"'</updated>
	<author>
		<name>My_awesome_name</name>
	</author>
	<id>http://'"${WURL}"'/</id>
'
}

function xml_content {
	print '	<entry>
		<title>'"${RSSTIT}"'</title>
		<link href="http://'${WURL}'/'${RSSTNOEXT}'.html"/>
		<id>http://'"${WURL}"'/'"${RSSTNOEXT}"'.html</id>
		<updated>'"${RDADAT}"'</updated>
		<summary>'"${RSSDES}"'</summary>
	 </entry>
'
}

if [[ -z $1 ]]; then
	usage
	exit 1
fi

parse_config
get_structure
gen_page_skel

exit 0
