#!/usr/bin/mksh
# 2013-2014 - wswsh - Ypnose <linuxien[AT]legtux[DOT]org
# Copyright (c) 2013-2014, Ypnose - All rights reserved.
# This project is under BSD (3-Clause) License
# See LICENSE for license details.
#set -x
RAC="$1"

function parse_config {
	if [[ -r ${RAC}/wswsh.conf && -r ${RAC}/includes/layout ]]; then
		. "${RAC}/wswsh.conf" && . "${RAC}/includes/layout"
	else
		print -u2 "Missing configs / layout"
		exit 1
	fi
}

function verify_dirs {
	if [[ ! -d ${RAC}/src ]]; then
		print -u2 "src doesn't exist"
		exit 1
	fi
	[[ ! -d ${RAC}/dest ]] && mkdir "${RAC}/dest"
}

function get_structure {
	verify_dirs
	if [[ -n $(find "${RAC}/src" -type d -print) ]]; then
		# The following line works with GNU find:
		# find "${RAC}/src" -type d -printf "dest/%P\0" | xargs -0 mkdir -p
		# I finally decided to write lines "compatible" with {Mir,Open}BSD. Here we go:
		cd "${RAC}/dest"
		( cd ../src; find . -type d -print0 ) | xargs -0 mkdir -p
		cd ..
	else
		print "No directory found. Nothing to create"
	fi
}

function parse_css_f {
	if [[ -n $CSSF && -r ${RAC}/src/${CSSF} ]]; then
		CSSV=1
		print "Using custom CSS style"
		cp "${RAC}/src/${CSSF}" "${RAC}/dest/${CSSF}"
	fi
}

function do_backup {
	if [[ -n $BACKUP ]]; then
		if [[ -d $BACKUP ]]; then
			WHEN="$(date "+%Y-%m-%d")"
			rm -R "${BACKUP}/src_"* && cp -R "${RAC}/src" "${BACKUP}/src_${WHEN}"
			rm -R "${BACKUP}/includes_"* && cp -R "${RAC}/includes" "${BACKUP}/includes_${WHEN}"
			cp "${RAC}/wswsh" "${BACKUP}/wswsh" && cp "${RAC}/wswsh.conf" "${BACKUP}/wswsh.conf"
		else
			print -u2 "Directory doesn't exist!"
		fi
	fi
}

function parse_file {
	# We got the title from <h1> or #. Add what you want...
	case $INTERP in
		smu) ATIT="$(awk '/\#/{gsub(/\# /,"");print $0;exit}' $f)";; # We can't use 'print " | "$0' because the variable is used two times.
		*) ATIT="$(awk '/<h1>/{gsub(/\t/,"");gsub(/[</]|h1>/,"");gsub(/>|</,"");print $0;exit}' $f)";; # ^SAME
	esac
}

function gen_page_skel {
	parse_css_f
	PAGES="$(find "${RAC}/src" -type f -iname "*.${EXT:-txt}")"
	print "Generating pages..."
	cd "$RAC"
	for f in $(find src -type f -iname "*.${EXT:-txt}"); do
		FILENOSRC="${f#*/}"
		FILENOEXT="${FILENOSRC%%.*}"
		FILEXPORT="dest/${FILENOEXT}.html"
		parse_file
		page_head > "$FILEXPORT"
		"${INTERP:-cat}" $f >> "$FILEXPORT"
		page_foot >> "$FILEXPORT"
		RET=$?
		if (( RET != 0 )); then
			print -u2 "Generating $f failed"
			exit 1
		fi
	done

	# RSS / Atom
	if [[ -n $FEED && $FEED = @([Yy]es|YES) ]]; then
		# XML date, emulates $(date --rfc-3339=seconds) from GNU date.
		RDAT=$(LC_ALL=C date "+%Y-%m-%dT%H:%M:%SZ")
		RSSF="dest/${RSSDIR}atom.xml"
		SORD="$(for f in $(find "src/blog/" -mindepth 2 -type f -iname "*.${EXT:-txt}"); \
			do awk '/<!-- DATE:/{gsub(/\t/,"");gsub(/<!-- DATE: | -->/,"");printf "%s",$0;exit}' $f; \
			print " $f"; done | sort -n | awk '{gsub(/201[2-8]-[0-1][0-9]-[0-3][0-9] /,"");print}')"
		gen_site_xml > "$RSSF"
		for f in $SORD; do
			# Don't need to enable a specific hour, let's assume I wrote the pages at midnight.
			RDADAT="$(awk '/<!-- DATE:/{gsub(/\t/,"");gsub(/<!-- DATE: | -->/,"");print $0"T00:00:00Z";exit}' $f)"
			RSSDES="$(awk '/<!-- DESC:/{gsub(/\t/,"");gsub(/<!-- DESC: | -->/,"");print $0;exit}' $f)"
			RSSTNOSRC="${f#*/}"
			RSSTNOEXT="${RSSTNOSRC%%.*}"
			parse_file
			xml_content >> "$RSSF"
		done
		print '</feed>' >> "$RSSF"
	fi

	# We copy existing *.html files from src to dest.
	for x in $(find "src" -type f -iname "*.html"); do
		if [[ -r dest/${x#*/} ]]; then
			print "dest/${x#*/} already exists"
			continue
		fi
		cp "$x" "dest/${x#*/}"
	done

	# Test if the file exists. Then find it/them and copy it/them to dest (supports multiple files with same name).
	if [[ -n $FIL ]]; then
		for y in $FIL; do
			if [[ -z $(find "src" -type f -name "$y") ]]; then
				print "$y is missing"
				continue
			fi
			for c in $(find "src" -type f -name "$y"); do
				cp "src/${c#*/}" "dest/${c#*/}"
			done
		done
	fi

	cd ..
	TOT=$(find "${RAC}/dest" -type f | wc -l)
	print "Generated $TOT files."
}

if [[ -z $1 ]]; then
	print -u2 "usage: wswsh [website_root]"
	exit 1
fi

parse_config
get_structure
gen_page_skel
do_backup

exit
